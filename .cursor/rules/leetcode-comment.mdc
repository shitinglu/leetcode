---
description: 
globs: 
alwaysApply: true
---
# LeetCode解题思路注释生成

这个规则用于分析算法解答。

## 规则内容

当分析LeetCode题目时，请提供以下内容：

1. 问题理解：简述题目的关键点和要求
   
2. 解题思路：主要参考我的解题方案
   - 问题本质
   - 解决方案(可多种)
   
3. 具体执行流程(以${xx}为例)
   
4. 关键点
   - 数据结构选择原因
   - 算法思路步骤
   - 时间复杂度分析
   - 空间复杂度分析

5. 复杂度分析

6. 方法选择

7. 将内容格式化为注释格式，添加到解题方面上方
   
8. 生成对应的TypeScript函数签名

## 示例

```typescript
/**
 * 问题:两数之和
 * 解题思路：
 * 1. 问题本质
 * - 在n×n的矩阵中找出行和列完全相同的配对数量
 * - 行和列相等意味着它们包含的元素完全相同且顺序一致
 * - 需要考虑重复情况：同一行可能与多个列相等
 *
 * 2. 解决方案（三种主要方法）
 *
 * A. 暴力法（三重循环）
 * - 遍历每一行
 * - 对每一行，遍历每一列
 * - 比较行和列的每个元素是否相等
 *
 * B. 哈希表法（优化方案）
 * - 将每一行转换为字符串作为特征值
 * - 使用Map存储每种行的出现次数
 * - 遍历列并检查是否存在匹配的行
 *
 * C. 矩阵转置法
 * - 将矩阵转置（行列互换）
 * - 比较原矩阵的行与转置矩阵的行
 * - 统计匹配的数量
 *
 * 3. 具体执行流程(以哈希表法为例)：
 * 以 grid = [[3,2,1],[1,7,6],[2,7,7]] 为例：
 * - 第一步：处理行
 *   - "3,2,1" -> count: 1
 *   - "1,7,6" -> count: 1
 *   - "2,7,7" -> count: 1
 * - 第二步：检查列
 *   - 第0列 "3,1,2" -> 不匹配
 *   - 第1列 "2,7,7" -> 匹配一次
 *   - 第2列 "1,6,7" -> 不匹配
 * - 返回匹配总数：1
 *
 * 4. 关键点
 * - 使用字符串表示可以简化数组比较
 * - Map的查找效率为O(1)
 * - 需要正确处理重复匹配的情况
 * - 矩阵一定是方阵（n×n）
 *
 * 5. 复杂度分析
 * - 暴力法：
 *   - 时间：O(n³)，三重循环
 *   - 空间：O(1)，只需要常数空间
 *
 * - 哈希表法：
 *   - 时间：O(n² * k)，k为转字符串的开销
 *   - 空间：O(n²)，存储行的字符串表示
 *
 * - 矩阵转置法：
 *   - 时间：O(n²)，需要遍历矩阵两次
 *   - 空间：O(n²)，存储转置矩阵
 *
 * 6. 方法选择
 * - 对于小规模数据，暴力法简单直接
 * - 哈希表法在大规模数据时更优
 * - 转置法思路清晰但空间消耗较大
 */
```
## 温度配置

- 温度值: 0.7
  - 较低温度（0.2-0.5）：生成更确定性、更保守的解题思路
  - 中等温度（0.6-0.8）：平衡创新性和准确性
  - 较高温度（0.9-1.0）：提供更多样化、创新的解题思路

## 使用说明

在聊天窗口中使用 `@cursor rules leetcode-comment` 调用此规则。
使用 `@cursor rules leetcode-comment temp=0.3` 调用低温度版本（更准确）。
使用 `@cursor rules leetcode-comment temp=0.9` 调用高温度版本（更创新）。




